
/* Configure JQuery AJAX */
$.ajaxSetup({cache: false, 
             dataType: 'json', 
             fail: function(jqXHR, textStatus, errorThrown) {
                        console.log('fail:\n\t' + textStatus + '\n\t' + errorThrown);
                        console.log('jqXHR: ');
                        console.log(jqXHR);
                    }
           });

monitor.ajax = {
    url: {
        users: { set: {}, get: {} },
        vehicles: { set: {}, get: {} },
        services: { set: {}, get: {} },
        landmarks: { set: {}, get: {} }
    },

    debug: {
        DONE: false
    },

    populateClientsList: null,
    updateTaxiLocationsOnMap: null,
    setDriverStatus: null,
    updateScheduledServicesList: null,
    addCustomControls: null,
    debugAJAXDone: null

}; /* monitor.ajax namespace */

/**
 * Constants
 */
 
/* Users */
monitor.ajax.url.users.set.DRIVER_STATUS = 'users/set_driver_status.json';
monitor.ajax.url.users.get.CLIENTS = 'users/get_clients.json';
/* Vehicles */
monitor.ajax.url.vehicles.get.CURRENT_POSITIONS = 'vehicles/get_current_positions.json';
/* Services */
monitor.ajax.url.services.get.GET_FORTHCOMING = 'services/get_forthcoming.json';
/* Landmarks */
monitor.ajax.url.landmarks.get.ENABLED = 'landmarks/get_enabled.json'; // TODO

/**
 * Functions
 */

monitor.ajax.populateClientsList = function(select_node_name) {
    var url = monitor.ajax.url.users.get.CLIENTS;

    $.ajax(url).done(
        function(data) {
            monitor.ajax.debugAJAXDone(url, data, false);                                   

            for (indx in data) {
                var client = data[indx];
                var client_option = $('<option>').val(client.id)
                                                 .text(client.id)
                                                 .attr('name', client.name);

                $( select_node_name ).append(client_option);
            }
        }
    );
};

/**
 * Get the latest location reported by every taxi and update the map. 
 */         
monitor.ajax.updateTaxiLocationsOnMap =  function (map) {
        var url = monitor.ajax.url.vehicles.get.CURRENT_POSITIONS;

        $.ajax(url).done(
            function(data) {                               

                monitor.ajax.debugAJAXDone(url, data, false);                                   
                                                                                 
                for (indx in data['taxisLatLon']) {                                      
                    object = data['taxisLatLon'][indx];                                  
                    taxiObject = object.Taxi;                                            
                    addTaxiMarkerToMap(map, taxiObject);                                 
                }                                                                        
            }
        );                                                                           
};

/**
 * selectElement: JQuery <select> object
 */
monitor.ajax.setDriverStatus =  function(select) {
        select.fadeTo(200, 0.33);

        var url = monitor.ajax.url.users.set.DRIVER_STATUS; 

        $.ajax(url).done(                                              
            function(data) {

                monitor.ajax.debugAJAXDone(url, data, false);

                // TODO: nothing gets updated at the server yet
                var option = select.find(":selected");

                select.css("background-color", "buttonface");
            }
        )
        .fail(
            function(jqXHR, textStatus, errorThrown) {
                select.css("background-color", "#FA8A8A");
            }
        )
        .always(                                                                
            function() {                                            
                select.fadeTo(200, 1.0);
            }                                                                
        );
};

monitor.ajax.updateScheduledServicesList =  function (container_selector) {
        var url = monitor.ajax.url.services.get.GET_FORTHCOMING;

        $.ajax(url).done(function(data) {

            monitor.ajax.debugAJAXDone(url, data, false);

            var servicesControls = $(container_selector);
            for (indx in data['services']) {
                var address = data['services'][indx].Service.address;
                var scheduled = data['services'][indx].Service.scheduled;
                $('<div>').append(address + '<br/>' + scheduled) 
                          .css({
                              'background-color': 'white', 
                              'color': 'black', 
                              'border-radius': '3px', 
                              'margin': '2px 5px 2px 5px', 
                              'padding': '0 2px 0 2px', 
                              'cursor': 'pointer'})
                          .appendTo(servicesControls); 
            }
        })
};

/**
 * Add custom controls based on the Landmarks stored in the database.
 */
monitor.ajax.addCustomControls = function (map) {
        var url = monitor.ajax.url.landmarks.get.ENABLED;

        $.ajax(url).done( function(data) {

            monitor.ajax.debugAJAXDone(url, data, false);

                for (indx in data['enabledLandmarks']) {
                    object = data['enabledLandmarks'][indx];
                    name = object.Landmark.name;
                    latitude = object.Landmark.latitude;
                    longitude = object.Landmark.longitude;

                    var geoLocation = new google.maps.LatLng(latitude, longitude);        
                    var locationControl = new monitor.controls.locationControl(map, name, geoLocation);
                    map.controls[google.maps.ControlPosition.TOP_LEFT].push(locationControl);
                }                                                 
        });
};

monitor.ajax.debugAJAXDone = function (url, data, isEnabled) {
    if(isEnabled || monitor.ajax.debug.DONE === true) {
        console.log('AJAX done:\n\t' + url);
        console.log(data);
    }
}; 

/* EOF */